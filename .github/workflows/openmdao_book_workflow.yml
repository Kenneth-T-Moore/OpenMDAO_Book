# Run linting check on Jupyter notebooks.

name: OpenMDAO Book Workflow

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # Remove push when finally merging.
  push:
    branches: [ main, artifact_update2]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

jobs:
  # This job is called test_docs.
  test_docs:
    # Run on Ubuntu
    runs-on: ubuntu-latest

    steps:

      # TEMPORARY WHILE GITHUB FIXES THIS https://github.com/actions/virtual-environments/issues/3185
      - name: Add the current IP address, long hostname and short hostname record to /etc/hosts file
        run: |
          echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)" | sudo tee -a /etc/hosts

      - name: Create SSH key
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install OpenMDAO Stack
        run: |
          echo "=============================================================";
          echo "Run #${GITHUB_RUN_NUMBER}";
          echo "Run ID: ${GITHUB_RUN_ID}";
          echo "Testing: ${GITHUB_REPOSITORY}";
          echo "Triggered by: ${GITHUB_EVENT_NAME}";
          echo "Initiated by: ${GITHUB_ACTOR}";
          echo "=============================================================";

          echo "=============================================================";
          echo "Create conda environment";
          echo "=============================================================";
          source $CONDA/etc/profile.d/conda.sh;
          echo $CONDA/bin >> $GITHUB_PATH;
          conda create -n OpenMDAO python=3.8 numpy=1.18 scipy=1.4 -q -y;
          conda activate OpenMDAO;

          echo "=============================================================";
          echo "Install PETSc";
          echo "=============================================================";
          conda install -c conda-forge mpi4py petsc=3.12 petsc4py -q -y;

          echo "=============================================================";
          echo "Install pyoptsparse";
          echo "=============================================================";

          git clone -q https://github.com/OpenMDAO/build_pyoptsparse;

          cd build_pyoptsparse;
          chmod 755 ./build_pyoptsparse.sh;

          if [ "${{ secrets.SNOPT_LOCATION_77 }}" ]; then
            echo "  > Secure copying SNOPT 7.7 over SSH"
            mkdir SNOPT
            scp -qr ${{ secrets.SNOPT_LOCATION_77 }} SNOPT
            ./build_pyoptsparse.sh -b "v2.1.5" -s SNOPT/src
          else
            ./build_pyoptsparse.sh -b "v2.1.5"
          fi

          cd ..

          export LD_LIBRARY_PATH=$HOME/ipopt/lib;

          echo "=============================================================";
          echo "Install OpenMDAO";
          echo "=============================================================";
          cd ..;
          git clone -q https://github.com/OpenMDAO/OpenMDAO;
          cd OpenMDAO;
          pip install .[all];
          cd ../OpenMDAO_Book;

          echo "=============================================================";
          echo "Install packages for Notebooks.";
          echo "=============================================================";
          pip install matplotlib;
          pip install jupyter;
          pip install nbconvert;
          pip install testflo;
          pip install ipyparallel;
          # Temporary: Install the latest jupyter-book which isn't on pypi
          git clone -q https://github.com/executablebooks/jupyter-book
          cd jupyter-book
          pip install -e .
          cd ..
          # pip install jupyter-book;

          echo "=============================================================";
          echo "List installed packages/versions";
          echo "=============================================================";
          conda list;

          echo "=============================================================";
          echo "Final additional setup to run MPI under notebooks.";
          echo "=============================================================";
          export OMPI_MCA_rmaps_base_oversubscribe=1
          jupyter serverextension enable --py ipyparallel;
          ipython profile create --parallel --profile=mpi;
          echo "c.IPClusterEngines.engine_launcher_class = 'MPIEngineSetLauncher'" >> ~/.ipython/profile_mpi/ipcluster_config.py;
          echo "c.IPClusterStart.controller_launcher_class = 'MPIControllerLauncher'" >> ~/.ipython/profile_mpi/ipcluster_config.py;
          ipcluster start -n 4 --profile=mpi &
          sleep 12

          echo "=============================================================";
          echo "Run the lint checks.";
          echo "=============================================================";
          cd openmdao_book/test
          testflo -n 1
          cd ../..

          echo "=============================================================";
          echo "Build the docs.";
          echo "=============================================================";

          if [ ! -d "./openmdao_book/OpenMDAO/" ]; then
              echo "Temporarily installing OpenMDAO repo to build the source docs";
              cd openmdao_book/;
              git clone https://github.com/OpenMDAO/OpenMDAO.git;
              cd ..;
          fi
          python build_source_docs.py;
          rm -rf openmdao_book/OpenMDAO;
          jupyter-book build -W --keep-going openmdao_book
          python copy_build_artifacts.py;
          #. ./build_all_docs.sh
          #cat /home/runner/work/OpenMDAO_Book/OpenMDAO_Book/openmdao_book/_build/html/reports/pyoptsparse_driver.log

          cd openmdao_book/_build/html
          mkdir reports
          echo "=============================================================";
          echo "Operations Completed.";
          echo "=============================================================";

      - name: Print Failure Logs
        if: ${{ failure() }}
        run: |
          cat /home/runner/work/OpenMDAO_Book/OpenMDAO_Book/openmdao_book/_build/html/reports/*

      - name: 'Upload Book'
        uses: actions/upload-artifact@v2
        with:
          name: openmdao_book
          path: openmdao_book/_build/html
          if-no-files-found: error
          retention-days: 2
